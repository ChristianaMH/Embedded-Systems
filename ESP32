// Load Wi-Fi library
#include <WiFi.h>
#include <HardwareSerial.h>

HardwareSerial MySerial1(1);

// Replace with your network credentials
const char* ssid     = "ESP32-Access-Point";
const char* password = "123456789";

// Set web server port number to 80
WiFiServer server(80);

// Variable to store the HTTP request
String header;

void setup() {
  // Initialize MySerial1 at 115200 baud rate, pins RX=16, TX=17
  MySerial1.begin(115200, SERIAL_8N1, 16, 17);
  
  // Initialize Serial for debugging
  Serial.begin(115200);
  Serial.println("ESP32 UART Test");

  // Connect to Wi-Fi network with SSID and password
  Serial.print("Setting AP (Access Point)â€¦");
  // Remove the password parameter, if you want the AP (Access Point) to be open
  WiFi.softAP(ssid, password);

  IPAddress IP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(IP);
  
  server.begin();
}

void loop(){
  WiFiClient client = server.available();   // Listen for incoming clients

  if (client) {                             // If a new client connects,
    Serial.println("New Client.");          // print a message out in the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    while (client.connected()) {            // loop while the client's connected
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        header += c;
        if (c == '\n') {                    // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();
            
            if (header.indexOf("GET /send?value=") >= 0) {
              // Extract the numeric value from the request
              int valueStartIndex = header.indexOf("value=") + 6;
              int valueEndIndex = header.indexOf(" ", valueStartIndex);
              String valueString = header.substring(valueStartIndex, valueEndIndex);

              // Print the numeric value to Serial
              Serial.print("Received value: ");
              Serial.println(valueString);
              
              // Send each character of the valueString over UART one by one
              Serial.print("Sending value over UART: ");
              for (int i = 0; i < valueString.length(); i++) {
                char valueChar = valueString[i];
                MySerial1.write(valueChar);  // Send each character
                Serial.write(valueChar);     // Print each character for debugging
                Serial.write("--");     // Print for visual
                delay(1000);
              }

              // valueString[6] = valueString.length();
              // MySerial1.write(valueString[6]);
              //Serial.print("Length value: ");
              //Serial.println(valueString.length());
              MySerial1.write('\n');  // Add newline to mark the end
              Serial.println();
            }
            
            // Display the HTML web page
            client.println("<!DOCTYPE html><html>");
            client.println("<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
            client.println("<link rel=\"icon\" href=\"data:,\">");
            // CSS to style the on/off buttons 
            // Feel free to change the background-color and font-size attributes to fit your preferences
            client.println("<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}");
            client.println(".button { background-color: #4CAF50; border: none; color: white; padding: 16px 40px;");
            client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}");
            client.println(".button2 {background-color: #555555;}</style></head>");
            
            // Web Page Heading
            client.println("<body><h1>ESP32 Web Server</h1>");

            // Add a form to send numeric values
            client.println("<p>Send a numeric value:</p>");
            client.println("<form action=\"/send\">");
            client.println("<input type=\"number\" name=\"value\">");
            client.println("<input type=\"submit\" value=\"Send\">");
            client.println("</form>");

            client.println("</body></html>");
            
            // The HTTP response ends with another blank line
            client.println();
            // Break out of the while loop
            break;
          } else { // if you got a newline, then clear currentLine
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }
      }
    }
    // Clear the header variable
    header = "";
    // Close the connection
    client.stop();
    Serial.println("Client disconnected.");
    Serial.println("");
  }
}
